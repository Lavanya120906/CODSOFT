import math

# Initialize the board
board = [[' ' for _ in range(3)] for _ in range(3)]

# Function to print the board
def print_board():
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Function to check for a win
def check_win(player):
    # Check rows, columns, and diagonals
    for row in range(3):
        if all([cell == player for cell in board[row]]):
            return True
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]):
        return True
    if all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

# Function to check for a draw
def check_draw():
    return all([cell != ' ' for row in board for cell in row])

# Function to get available moves
def get_available_moves():
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

# Minimax Algorithm with Alpha-Beta Pruning
def minimax(is_maximizing, alpha, beta):
    if check_win('X'):
        return -1
    if check_win('O'):
        return 1
    if check_draw():
        return 0

    if is_maximizing:
        best_score = -math.inf
        for (i, j) in get_available_moves():
            board[i][j] = 'O'
            score = minimax(False, alpha, beta)
            board[i][j] = ' '
            best_score = max(score, best_score)
            alpha = max(alpha, score)
            if beta <= alpha:
                break
        return best_score
    else:
        best_score = math.inf
        for (i, j) in get_available_moves():
            board[i][j] = 'X'
            score = minimax(True, alpha, beta)
            board[i][j] = ' '
            best_score = min(score, best_score)
            beta = min(beta, score)
            if beta <= alpha:
                break
        return best_score

# Function to make the best move for AI
def best_move():
    best_score = -math.inf
    move = None
    for (i, j) in get_available_moves():
        board[i][j] = 'O'
        score = minimax(False, -math.inf, math.inf)
        board[i][j] = ' '
        if score > best_score:
            best_score = score
            move = (i, j)
    return move

# Game Loop
def play_game():
    current_player = 'X'  # Human starts first
    while True:
        print_board()
        if current_player == 'X':
            row = int(input("Enter the row (0, 1, or 2): "))
            col = int(input("Enter the column (0, 1, or 2): "))
            if board[row][col] == ' ':
                board[row][col] = 'X'
                if check_win('X'):
                    print_board()
                    print("You win!")
                    break
                current_player = 'O'
        else:
            move = best_move()
            if move:
                board[move[0]][move[1]] = 'O'
                if check_win('O'):
                    print_board()
                    print("AI wins!")
                    break
                current_player = 'X'

        if check_draw():
            print_board()
            print("It's a draw!")
            break

# Start the game
play_game()
